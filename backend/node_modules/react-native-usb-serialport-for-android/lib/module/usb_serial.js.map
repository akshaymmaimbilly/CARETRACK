{"version":3,"sources":["usb_serial.tsx"],"names":["UsbSerialportForAndroid","DataReceivedEvent","UsbSerial","constructor","deviceId","eventEmitter","listeners","subscriptions","send","hexStr","onReceived","listener","listenerProxy","event","data","push","sub","addListener","close","remove"],"mappings":";;AACA,OAAOA,uBAAP,MAAoC,iBAApC;AAEA,MAAMC,iBAAiB,GAAG,2BAA1B;AASA,eAAe,MAAMC,SAAN,CAAgB;AAM7BC,EAAAA,WAAW,CAACC,QAAD,EAAmBC,YAAnB,EAA+C;AAAA;;AAAA;;AAAA;;AAAA;;AACxD,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,IAAI,CAACC,MAAD,EAAgC;AAClC,WAAOT,uBAAuB,CAACQ,IAAxB,CAA6B,KAAKJ,QAAlC,EAA4CK,MAA5C,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,UAAU,CAACC,QAAD,EAAqB;AAC7B,UAAMC,aAAa,GAAIC,KAAD,IAAsB;AAC1C,UAAIA,KAAK,CAACT,QAAN,KAAmB,KAAKA,QAA5B,EAAsC;AACpC;AACD;;AACD,UAAI,CAACS,KAAK,CAACC,IAAX,EAAiB;AACf;AACD;;AAEDH,MAAAA,QAAQ,CAACE,KAAD,CAAR;AACD,KATD;;AAWA,SAAKP,SAAL,CAAeS,IAAf,CAAoBH,aAApB;AACA,UAAMI,GAAG,GAAG,KAAKX,YAAL,CAAkBY,WAAlB,CAA8BhB,iBAA9B,EAAiDW,aAAjD,CAAZ;AACA,SAAKL,aAAL,CAAmBQ,IAAnB,CAAwBC,GAAxB;AACA,WAAOA,GAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,KAAK,GAAiB;AACpB,SAAK,MAAMF,GAAX,IAAkB,KAAKT,aAAvB,EAAsC;AACpCS,MAAAA,GAAG,CAACG,MAAJ;AACD;;AACD,WAAOnB,uBAAuB,CAACkB,KAAxB,CAA8B,KAAKd,QAAnC,CAAP;AACD;;AAjE4B","sourcesContent":["import type { EventEmitter, EventSubscription } from 'react-native';\nimport UsbSerialportForAndroid from './native_module';\n\nconst DataReceivedEvent = 'usbSerialPortDataReceived';\n\nexport interface EventData {\n  deviceId: number;\n  data: string;\n}\n\nexport type Listener = (data: EventData) => void;\n\nexport default class UsbSerial {\n  deviceId: number;\n  private eventEmitter: EventEmitter;\n  private listeners: Listener[];\n  private subscriptions: EventSubscription[];\n\n  constructor(deviceId: number, eventEmitter: EventEmitter) {\n    this.deviceId = deviceId;\n    this.eventEmitter = eventEmitter;\n    this.listeners = [];\n    this.subscriptions = [];\n  }\n\n  /**\n   * Send data with hex string.\n   *\n   * May return error with these codes:\n   * * DEVICE_NOT_OPEN\n   * * SEND_FAILED\n   *\n   * See {@link Codes}\n   * @param hexStr\n   * @returns\n   */\n  send(hexStr: string): Promise<null> {\n    return UsbSerialportForAndroid.send(this.deviceId, hexStr);\n  }\n\n  /**\n   * Listen to data received event.\n   *\n   * @param listener\n   * @returns EventSubscription\n   */\n  onReceived(listener: Listener) {\n    const listenerProxy = (event: EventData) => {\n      if (event.deviceId !== this.deviceId) {\n        return;\n      }\n      if (!event.data) {\n        return;\n      }\n\n      listener(event);\n    };\n\n    this.listeners.push(listenerProxy);\n    const sub = this.eventEmitter.addListener(DataReceivedEvent, listenerProxy);\n    this.subscriptions.push(sub);\n    return sub;\n  }\n\n  /**\n   *\n   * May return error with these codes:\n   * * DEVICE_NOT_OPEN_OR_CLOSED\n   *\n   * See {@link Codes}\n   * @returns Promise<null>\n   */\n  close(): Promise<any> {\n    for (const sub of this.subscriptions) {\n      sub.remove();\n    }\n    return UsbSerialportForAndroid.close(this.deviceId);\n  }\n}\n"]}