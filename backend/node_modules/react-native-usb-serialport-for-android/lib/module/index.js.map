{"version":3,"sources":["index.tsx"],"names":["NativeEventEmitter","NativeModules","Platform","UsbSerialportForAndroid","Device","UsbSerial","Listener","EventData","CODE_DEVICE_NOT_FOND","CODE_DRIVER_NOT_FOND","CODE_NOT_ENOUGH_PORTS","CODE_PERMISSION_DENIED","CODE_OPEN_FAILED","CODE_DEVICE_NOT_OPEN","CODE_SEND_FAILED","CODE_DEVICE_NOT_OPEN_OR_CLOSED","getConstants","Codes","DEVICE_NOT_FOND","DRIVER_NOT_FOND","NOT_ENOUGH_PORTS","PERMISSION_DENIED","OPEN_FAILED","DEVICE_NOT_OPEN","SEND_FAILED","DEVICE_NOT_OPEN_OR_CLOSED","eventEmitter","Parity","defaultManager","list","tryRequestPermission","deviceId","result","hasPermission","open","options","baudRate","dataBits","stopBits","parity","UsbSerialManager","OS","Proxy","get","Error"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,aAA7B,EAA4CC,QAA5C,QAA4D,cAA5D;AACA,OAAOC,uBAAP,IAAkCC,MAAlC,QAAgD,iBAAhD;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,SAASD,MAAT,EAAiBC,SAAjB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,cAApC;AAEA,MAAM;AACJC,EAAAA,oBADI;AAEJC,EAAAA,oBAFI;AAGJC,EAAAA,qBAHI;AAIJC,EAAAA,sBAJI;AAKJC,EAAAA,gBALI;AAMJC,EAAAA,oBANI;AAOJC,EAAAA,gBAPI;AAQJC,EAAAA;AARI,IASFd,aAAa,CAACE,uBAAd,CAAsCa,YAAtC,EATJ;AAWA,OAAO,MAAMC,KAAK,GAAG;AACnBC,EAAAA,eAAe,EAAEV,oBADE;AAEnBW,EAAAA,eAAe,EAAEV,oBAFE;AAGnBW,EAAAA,gBAAgB,EAAEV,qBAHC;AAInBW,EAAAA,iBAAiB,EAAEV,sBAJA;AAKnBW,EAAAA,WAAW,EAAEV,gBALM;AAMnBW,EAAAA,eAAe,EAAEV,oBANE;AAOnBW,EAAAA,WAAW,EAAEV,gBAPM;AAQnBW,EAAAA,yBAAyB,EAAEV;AARR,CAAd;AAWP,MAAMW,YAAY,GAAG,IAAI1B,kBAAJ,CACnBC,aAAa,CAACE,uBADK,CAArB;AAWA,WAAYwB,MAAZ;;WAAYA,M;AAAAA,EAAAA,M,CAAAA,M;AAAAA,EAAAA,M,CAAAA,M;AAAAA,EAAAA,M,CAAAA,M;AAAAA,EAAAA,M,CAAAA,M;AAAAA,EAAAA,M,CAAAA,M;GAAAA,M,KAAAA,M;;AA2CZ,MAAMC,cAAuB,GAAG;AAC9BC,EAAAA,IAAI,GAAsB;AACxB,WAAO1B,uBAAuB,CAAC0B,IAAxB,EAAP;AACD,GAH6B;;AAK9B,QAAMC,oBAAN,CAA2BC,QAA3B,EAA+D;AAC7D,UAAMC,MAAM,GAAG,MAAM7B,uBAAuB,CAAC2B,oBAAxB,CAA6CC,QAA7C,CAArB;AACA,WAAOC,MAAM,KAAK,CAAlB;AACD,GAR6B;;AAU9BC,EAAAA,aAAa,CAACF,QAAD,EAAqC;AAChD,WAAO5B,uBAAuB,CAAC8B,aAAxB,CAAsCF,QAAtC,CAAP;AACD,GAZ6B;;AAc9B,QAAMG,IAAN,CAAWH,QAAX,EAA6BI,OAA7B,EAAuE;AACrE,UAAMhC,uBAAuB,CAAC+B,IAAxB,CACJH,QADI,EAEJI,OAAO,CAACC,QAFJ,EAGJD,OAAO,CAACE,QAHJ,EAIJF,OAAO,CAACG,QAJJ,EAKJH,OAAO,CAACI,MALJ,CAAN;AAOA,WAAO,IAAIlC,SAAJ,CAAc0B,QAAd,EAAwBL,YAAxB,CAAP;AACD;;AAvB6B,CAAhC;AA0BA,OAAO,MAAMc,gBAAyB,GACpCtC,QAAQ,CAACuC,EAAT,KAAgB,SAAhB,GACIb,cADJ,GAEK,IAAIc,KAAJ,CACC,EADD,EAEC;AACEC,EAAAA,GAAG,GAAG;AACJ,WAAO,MAAM;AACX,YAAM,IAAIC,KAAJ,CAAW,eAAc1C,QAAQ,CAACuC,EAAG,EAArC,CAAN;AACD,KAFD;AAGD;;AALH,CAFD,CAHA","sourcesContent":["import { NativeEventEmitter, NativeModules, Platform } from 'react-native';\nimport UsbSerialportForAndroid, { Device } from './native_module';\nimport UsbSerial from './usb_serial';\n\nexport { Device, UsbSerial };\nexport { Listener, EventData } from './usb_serial';\n\nconst {\n  CODE_DEVICE_NOT_FOND,\n  CODE_DRIVER_NOT_FOND,\n  CODE_NOT_ENOUGH_PORTS,\n  CODE_PERMISSION_DENIED,\n  CODE_OPEN_FAILED,\n  CODE_DEVICE_NOT_OPEN,\n  CODE_SEND_FAILED,\n  CODE_DEVICE_NOT_OPEN_OR_CLOSED,\n} = NativeModules.UsbSerialportForAndroid.getConstants();\n\nexport const Codes = {\n  DEVICE_NOT_FOND: CODE_DEVICE_NOT_FOND,\n  DRIVER_NOT_FOND: CODE_DRIVER_NOT_FOND,\n  NOT_ENOUGH_PORTS: CODE_NOT_ENOUGH_PORTS,\n  PERMISSION_DENIED: CODE_PERMISSION_DENIED,\n  OPEN_FAILED: CODE_OPEN_FAILED,\n  DEVICE_NOT_OPEN: CODE_DEVICE_NOT_OPEN,\n  SEND_FAILED: CODE_SEND_FAILED,\n  DEVICE_NOT_OPEN_OR_CLOSED: CODE_DEVICE_NOT_OPEN_OR_CLOSED,\n};\n\nconst eventEmitter = new NativeEventEmitter(\n  NativeModules.UsbSerialportForAndroid\n);\n\nexport interface OpenOptions {\n  baudRate: number;\n  parity: Parity;\n  dataBits: number;\n  stopBits: number;\n}\n\nexport enum Parity {\n  None = 0,\n  Odd,\n  Even,\n  Mark,\n  Space,\n}\n\nexport interface Manager {\n  list(): Promise<Device[]>;\n  /**\n   * Return true if already has permission, otherwise will request permission and return false.\n   *\n   * May return error with these codes:\n   * * DEVICE_NOT_FOND\n   *\n   * See {@link Codes}\n   * @param deviceId\n   */\n  tryRequestPermission(deviceId: number): Promise<boolean>;\n  /**\n   * May return error with these codes:\n   * * DEVICE_NOT_FOND\n   *\n   * See {@link Codes}\n   * @param deviceId\n   */\n  hasPermission(deviceId: number): Promise<boolean>;\n  /**\n   * May return error with these codes:\n   * * DEVICE_NOT_FOND\n   * * DRIVER_NOT_FOND\n   * * NOT_ENOUGH_PORTS\n   * * PERMISSION_DENIED\n   * * OPEN_FAILED\n   *\n   * See {@link Codes}\n   * @param deviceId\n   * @param options\n   */\n  open(deviceId: number, options: OpenOptions): Promise<UsbSerial>;\n}\n\nconst defaultManager: Manager = {\n  list(): Promise<Device[]> {\n    return UsbSerialportForAndroid.list();\n  },\n\n  async tryRequestPermission(deviceId: number): Promise<boolean> {\n    const result = await UsbSerialportForAndroid.tryRequestPermission(deviceId);\n    return result === 1;\n  },\n\n  hasPermission(deviceId: number): Promise<boolean> {\n    return UsbSerialportForAndroid.hasPermission(deviceId);\n  },\n\n  async open(deviceId: number, options: OpenOptions): Promise<UsbSerial> {\n    await UsbSerialportForAndroid.open(\n      deviceId,\n      options.baudRate,\n      options.dataBits,\n      options.stopBits,\n      options.parity\n    );\n    return new UsbSerial(deviceId, eventEmitter);\n  },\n};\n\nexport const UsbSerialManager: Manager =\n  Platform.OS === 'android'\n    ? defaultManager\n    : (new Proxy(\n        {},\n        {\n          get() {\n            return () => {\n              throw new Error(`Not support ${Platform.OS}`);\n            };\n          },\n        }\n      ) as Manager);\n"]}